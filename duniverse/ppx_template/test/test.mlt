open! Core

(* Normal compiler error for unknown layout. *)
let%template id (type a : x) (x : a) : a = x

[%%expect
  {|
Line _, characters _-_:
Error: Unknown layout x
|}]

(* Normal compiler error for unknown layout bound by [ppx_template]. *)
let%template id (type a : foo) (x : a) : a = x [@@kind foo = bar]

[%%expect
  {|
Line _, characters _-_:
Error: Unknown layout bar
|}]

(* Normal compiler error for unknown mode bound by [ppx_template]. *)
let%template id (x @ foo) = x [@@mode foo = bar]

[%%expect
  {|
Line _, characters _-_:
Error: Unrecognized mode bar.
|}]

(* Normal compiler error for unknown modality bound by [ppx_template]. *)
module _ : sig
  val%template id : 'a -> 'a @@ foo [@@modality foo = bar]
end = struct
  let%template id x = x [@@mode foo = bar]
end

[%%expect
  {|
Line _, characters _-_:
Error: Unrecognized modality bar.
|}]

(* [ppx_template] error for unbound identifier for non-basic types *)
let%template x = () [@@alloc a @ m = bar]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [bar] of type [(Alloc @ Mode)].
|}]

(* Duplicate jkinds for single kind variable (signature). *)
module _ : sig
  val%template id : ('a : x). 'a -> 'a [@@kind x = (value, value)]
end = struct
  let id x = x
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate expressions for single pattern" (x (value))))
|}]

(* Duplicate jkinds for single kind variable (structure). *)
module _ = struct
  let%template id (type a : x) (x : a) : a = x [@@kind x = (value, value)]
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate expressions for single pattern" (x (value))))
|}]

(* Duplicate jkinds for single kind variable (expression). *)
let () =
  let%template id (type a : x) (x : a) : a = x [@@kind x = (value, value)] in
  ()
;;

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate expressions for single pattern" (x (value))))
|}]

(* Duplicate jkinds for single kind variable (module declaration). *)
module type S = sig
  module%template _ : sig end [@@kind x = (value, value)]
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate expressions for single pattern" (x (value))))
|}]

(* Duplicate jkinds for single kind variable (module expression). *)
module%template _ = struct end [@@kind x = (value, value)]

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate expressions for single pattern" (x (value))))
|}]

(* Duplicate kind variables (signature). *)
module _ : sig
  val%template id : ('a : x). 'a -> 'a [@@kind x = value, x = value]
end = struct
  let id x = x
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate patterns" (x)))
|}]

(* Duplicate kind variables (structure). *)
module _ = struct
  let%template id (type a : x) (x : a) : a = x [@@kind x = value, x = value]
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate patterns" (x)))
|}]

(* Duplicate kind variables (expression). *)
let () =
  let%template id (type a : x) (x : a) : a = x [@@kind x = value, x = value] in
  ()
;;

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate patterns" (x)))
|}]

(* Duplicate kind variables (module declaration). *)
module type S = sig
  module%template _ : sig end [@@kind x = value, x = value]
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate patterns" (x)))
|}]

(* Duplicate kind variables (module expression). *)
module%template _ = struct end [@@kind x = value, x = value]

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate patterns" (x)))
|}]

(* Check error printing of more complicated kind expressions. *)
module%template _ = struct
  let f x = x
  [@@kind
    k
    = ( (value mod portable) & (value mod contended)
      , (value mod portable) & (value mod contended)
      , (value & bits32) mod portable contended
      , (value & bits32) mod portable contended )]
  ;;
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template]
        ("duplicate expressions for single pattern"
         (k
          ((Product (Mod value (portable)) (Mod value (contended)))
           (Mod (Product value bits32) (contended portable))))))
|}]

(* Missing [@kind: l] on recursive call. *)
module _ : sig
  val%template apply_n_times : ('a : l). n:int -> ('a -> 'a) -> 'a -> 'a
  [@@kind l = (value, float64)]
end = struct
  let%template rec apply_n_times ~n f x =
    if n <= 0 then x else apply_n_times ~n:(n - 1) f (f x)
  [@@kind l = (value, float64)]
  ;;
end

[%%expect
  {|
Line _, characters _-_:
Error: Signature mismatch:
       ...
       Values do not match:
         val apply_n_times__float64 : n:int -> ('a -> 'a) -> 'a -> 'a
       is not included in
         val apply_n_times__float64 :
           ('a : float64). n:int -> ('a -> 'a) -> 'a -> 'a
       The type n:int -> ('a -> 'a) -> 'a -> 'a
       is not compatible with the type n:int -> ('b -> 'b) -> 'b -> 'b
       The layout of 'a is float64
         because of the definition of apply_n_times__float64 at file "test.mlt", lines 188-189, characters 2-31.
       But the layout of 'a must be a sublayout of value
         because of the definition of apply_n_times__float64 at file "test.mlt", lines 191-192, characters 33-58.
       File "test.mlt", lines 188-189, characters 2-31: Expected declaration
       File "test.mlt", line 191, characters 19-32: Actual declaration
|}]

(* Missing [@kind: l] on recursive call (as above, but with a newtype expression). *)
module _ : sig
  val%template apply_n_times : ('a : l). n:int -> ('a -> 'a) -> 'a -> 'a
  [@@kind l = (value, float64)]
end = struct
  let%template rec apply_n_times : type (a : l). n:int -> (a -> a) -> a -> a =
    fun ~n f x -> if n <= 0 then x else apply_n_times ~n:(n - 1) f (f x)
  [@@kind l = (value, float64)]
  ;;
end

[%%expect
  {|
Line _, characters _-_:
Error: This expression has type a -> a but an expression was expected of type
         'a -> 'a
       The layout of a is float64
         because of the annotation on the abstract type declaration for a.
       But the layout of a must be a sublayout of value
         because of the annotation on the universal variable 'a.
|}]

(* [@kind] on expression other than an identifier. *)
module _ = struct
  let%template apply f x = f x [@kind a b] [@@kind a = bits64, b = bits64]
end

[%%expect
  {|
Line _, characters _-_:
Error: [%template]: don't know how to mangle this expression (suffix:
       bits64__bits64)
|}]

(* [@kind] on module expression other than an identifier. *)
[%%template module _ = struct end [@kind bits64]]

[%%expect
  {|
Line _, characters _-_:
Error: [%template]: don't know how to mangle this module expression (suffix:
       bits64)
|}]

(* Unbound type variables in templates unify across instantiations, which can cause
   confusing behavior. Update docs if this is ever changed. *)
[%%template
  module _ = struct
    let[@kind k = (value, float64)] f (x : ('a : k)) : 'a = x
  end]

[%%expect
  {|
Line _, characters _-_:
Error: This type ('a : float64) should be an instance of type ('a0 : value)
       The layout of 'a is value
         because of the annotation on the type variable 'a.
       But the layout of 'a must overlap with float64
         because of the annotation on the type variable 'a.
|}]

module type%template Id = sig
  external id : ('a : k). 'a -> 'a = "%identity" [@@kind k = (value, float64)]
end

[%%expect {| |}]

module%template Id : Id = struct
  external id : ('a : k). 'a -> 'a = "%identity" [@@kind k = (value, float64)]
end

[%%expect {| |}]

(* Representation of product kinds in error messages. *)
module _ : sig
  val%template id : ('a : x). 'a -> 'a [@@kind x = (value & bits32, value & bits32)]
end = struct
  let id x = x
end

[%%expect
  {|
Line _, characters _-_:
Error: ([%template]
        ("duplicate expressions for single pattern" (x ((Product value
       bits32)))))
|}]

(* Demonstrate error message for incorrect [@exclave_if_local] usage. *)
let%template _ : _ =
  (let () = () in
   ())
  [@exclave_if_local local]
;;

[%%expect
  {|
Line _, characters _-_:
Error: ([%template]
        "exclave_if_local is only allowed on tailcalls or syntactic
       allocations (e.g. tuples) consisting entirely of identifiers, record
       fields, and/or constants")
|}]

(* [@exclave_if_local] isn't allowed on tailcalls if the arguments aren't constant. *)
let%template g _ : _ = f (Some 1) [@exclave_if_local local]

[%%expect
  {|
Line _, characters _-_:
Error: ([%template]
        "exclave_if_local is only allowed on tailcalls or syntactic
       allocations (e.g. tuples) consisting entirely of identifiers, record
       fields, and/or constants")
|}]

(* [@exclave_if_local] is allowed on tailcalls if the arguments are constant constructors. *)
let%template g _ : _ = Fn.id None [@exclave_if_local local]

[%%expect {| |}]

(* We rely on the compiler to reject bad [exclave_] placement. *)
let%template _ : _ =
  let () = () [@exclave_if_local local] in
  ()
;;

[%%expect
  {|
Line _, characters _-_:
Error: Exclave expression should only be in tail position of the current region.
|}]

let%template[@kind Foo] _ : _ = ()

[%%expect
  {|
Line _, characters _-_:
Error: apply expected
|}]

let%template[@kind foo = Bar] _ : _ = ()

[%%expect
  {|
Line _, characters _-_:
Error: expected a kind abbreviation, product of kinds, or kind with a mod
|}]

let%template _ : _ = () [@kind Foo]

[%%expect
  {|
Line _, characters _-_:
Error: expected a kind abbreviation, product of kinds, or kind with a mod
|}]

(* When [ppx_template] produces error nodes, be sure to mark any attributes in the dropped
   code as "handled" so we get the correct error message. *)

let%template f x = (g [@dropped]) (g x) [@exclave_if_local bad_attribute_location]

[%%expect
  {|
Line _, characters _-_:
Error: ([%template]
        "exclave_if_local is only allowed on tailcalls or syntactic
       allocations (e.g. tuples) consisting entirely of identifiers, record
       fields, and/or constants")
|}]

let%template _ : _ = f (x [@dropped]) [@mode bad_attribute_location]

[%%expect
  {|
Line _, characters _-_:
Error: [%template]: don't know how to mangle this expression (suffix:
       bad_attribute_location)
|}]

let%template[@mode repeat = local, repeat = global] x = (x [@dropped])

[%%expect
  {|
Line _, characters _-_:
Error: ([%template] ("duplicate patterns" (repeat)))
|}]

  type%template t : k [@@kind k = ((value mod portable) & value)]
type%template u = (t[@kind value & (value mod portable)])

[%%expect
  {|
Line _, characters _-_:
Error: Unbound type constructor t__'value_'value_mod_portable''
|}]

  type%template t : k [@@kind k = (value & value) mod portable]
type%template u = (t[@kind (value mod portable) & (value mod portable)])

[%%expect
  {|
Line _, characters _-_:
Error: Unbound type constructor t__''value_mod_portable'_'value_mod_portable''
|}]

module%template _ = struct
  (* Regression test: this used to stack-overflow the ppx exe *)
  type t [@@kind k = (k & value)] [@@warning "-34"]
end

[%%expect {| |}]

(* Kind modifiers (the things after a [mod] in a kind) are [mode]s in the parsetree. But
   we explicitly do not want to support this currently. *)

module%template [@mode m = global] _ = struct
  let f : ('a : value mod m). 'a -> 'a = fun x -> x
end

[%%expect
  {|
Line _, characters _-_:
Error: Unrecognized modifier m.
|}]

module%template [@mode m = global] _ = struct
  let[@kind k = value mod m] f : ('a : k). 'a -> 'a = fun x -> x
end

[%%expect
  {|
Line _, characters _-_:
Error: Unrecognized modifier m.
|}]

module%template [@mode m = global] _ = struct
  type t : (value mod contended m portable) & immediate
end

[%%expect
  {|
Line _, characters _-_:
Error: Unrecognized modifier m.
|}]

(* Incorrect attibute payload for [%%template.portable] *)
module%template.portable [@modality m = (portable, nonportable)] F = struct end

[%%expect
  {|
Line _, characters _-_:
Error: ident expected
|}]

(* Error messages for mono-attributes in invalid positions *)

let%template apply f x = f x [@kind]

[%%expect
  {|
Line _, characters _-_:
Error: [%template]: don't know how to mangle this expression (suffix: )
|}]

let%template apply f x = f x [@kind value value]

[%%expect
  {|
Line _, characters _-_:
Error: [%template]: don't know how to mangle this expression (suffix: )
|}]

let%template apply f x = f x [@kind bits32]

[%%expect
  {|
Line _, characters _-_:
Error: [%template]: don't know how to mangle this expression (suffix: bits32)
|}]

(* Error messages for unbound identifiers in [exclave_if*] and [zero_alloc_if*] attributes *)

let%template f x = x [@exclave_if_local foo]

[%%expect
  {|
Line _, characters _-_:
Error: Unknown or invalid mode identifier: foo
|}]

let%template[@mode foo = unique] f x = x [@exclave_if_local foo]

[%%expect
  {|
Line _, characters _-_:
Error: Unknown or invalid mode identifier: unique
|}]

let%template f x = x [@exclave_if_stack foo]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [foo] of type [Alloc].
|}]

let%template f x = x [@@zero_alloc_if_local foo]

[%%expect
  {|
Line _, characters _-_:
Error: Unknown or invalid mode identifier: foo
|}]

let%template[@mode foo = unique] f x = x [@@zero_alloc_if_local unique]

[%%expect
  {|
Line _, characters _-_:
Error: Unknown or invalid mode identifier: unique
|}]

let%template f x = x [@@zero_alloc_if_stack foo]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [foo] of type [Alloc].
|}]

module type T = sig
  val%template f : int -> int [@@zero_alloc_if_local foo]
end

[%%expect
  {|
Line _, characters _-_:
Error: Unknown or invalid mode identifier: foo
|}]

module type T = sig
  val%template f : int -> int [@@mode foo = unique] [@@zero_alloc_if_local foo]
end

[%%expect
  {|
Line _, characters _-_:
Error: Unknown or invalid mode identifier: unique
|}]

module type T = sig
  val%template f : int -> int [@@zero_alloc_if_stack foo]
end

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [foo] of type [Alloc].
|}]

let%template f x = x [@@alloc a = (heap, queue)]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [queue] of type [Alloc].
|}]

(* Hints for nearby names *)

let%template f x = x [@@alloc a = heap_global]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [heap_global] of type [Alloc].
Hint: Did you mean [heap]?
|}]

let%template f x = x [@@alloc a = stack_local]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [stack_local] of type [Alloc].
Hint: Did you mean [stack]?
|}]

let%template f x = x [@@alloc a @ m = heap]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [heap] of type [(Alloc @ Mode)].
Hint: Did you mean [heap_global]?
|}]

let%template f x = x [@@alloc a @ m = stack]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [stack] of type [(Alloc @ Mode)].
Hint: Did you mean [stack_local]?
|}]

let%template f x = x [@alloc heap_global]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [heap_global] of type [Alloc].
Hint: Did you mean [heap]?
|}]

let%template f x = x [@alloc stack_local]

[%%expect
  {|
Line _, characters _-_:
Error: Unbound template identifier [stack_local] of type [Alloc].
Hint: Did you mean [stack]?
|}]
